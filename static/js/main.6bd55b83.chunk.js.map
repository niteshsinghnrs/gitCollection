{"version":3,"sources":["logo.svg","Component/IndividualGif.js","Component/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","IndividualGif","props","state","data","id","label","gifLink","loadImage","pageUrl","console","log","this","match","history","url","postId","params","foundImage","find","imgObj","setState","Helmet","property","content","src","Component","HomePage","map","item","i","key","to","App","className","exact","path","component","render","routerProps","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,qKC4E5BC,E,kDAxEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,KAAM,CACJ,CACEC,GAAI,EACJC,MAAO,QACPC,QACE,6EAEJ,CACEF,GAAI,EACJC,MAAO,QACPC,QACE,6EAEJ,CACEF,GAAI,EACJC,MAAO,QACPC,QACE,6EAEJ,CACEF,GAAI,EACJC,MAAO,QACPC,QACE,8EAGNC,UAAW,GACXC,QAAS,IA/BM,E,gEAoCjBC,QAAQC,IAAIC,KAAKV,OADC,MAGSU,KAAKV,MAAfW,GAHC,EAGVC,QAHU,EAGDD,OACbJ,EAAUI,EAAME,IAChBC,EAASH,EAAMI,OAAOX,MACtBY,EAAaN,KAAKT,MAAMC,KAAKe,MAAK,SAACC,GAAD,OAAYA,EAAOd,QAAUU,KACnEN,QAAQC,IAAIO,GACZN,KAAKS,SAAS,CACZb,UAAU,eAAMU,GAChBT,QAASA,M,+BAIX,OACE,6BACE,kBAACa,EAAA,EAAD,KACE,0BAAMC,SAAS,WAAWC,QAASZ,KAAKT,MAAMK,UAAUF,QACxD,0BAAMiB,SAAS,UAAUC,QAAQ,cACjC,0BACED,SAAS,iBACTC,QAASZ,KAAKT,MAAMK,UAAUF,QAEhC,0BAAMiB,SAAS,WAAWC,QAASZ,KAAKT,MAAMK,UAAUD,UACxD,0BACEgB,SAAS,SACTC,QAAQ,6DAGXZ,KAAKT,MAAMK,UACV,6BAAM,yBAAKiB,IAAKb,KAAKT,MAAMK,UAAUD,WACnC,U,GAnEgBmB,a,OCmDbC,E,kDAjDb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,CACJ,CACEC,GAAI,EACJC,MAAO,QACPC,QACE,6EAEJ,CACEF,GAAI,EACJC,MAAO,QACPC,QACE,6EAEJ,CACEF,GAAI,EACJC,MAAO,QACPC,QACE,6EAEJ,CACEF,GAAI,EACJC,MAAO,QACPC,QACE,8EAGNC,UAAW,IA7BI,E,qDAiCjB,OACE,6BACGI,KAAKT,MAAMC,KAAKwB,KAAI,SAACC,EAAMC,GAC1B,OACE,0BAAMC,IAAKD,EAAI,GACb,kBAAC,IAAD,CAASE,GAAE,iBAAYH,EAAKvB,QAC1B,yBAAKmB,IAAKI,EAAKtB,oB,GAxCRmB,a,OCoBRO,MAjBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAASF,GAAE,KAAX,SACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CACES,KAAK,gBACLE,OAAQ,SAACC,GAAD,OAAiB,kBAAC,EAAkBA,SCHlCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9B,MACvB,2DCXN+B,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.6bd55b83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nclass IndividualGif extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: [\r\n        {\r\n          id: 1,\r\n          label: \"Test1\",\r\n          gifLink:\r\n            \"https://media.tenor.com/images/0a00ff974d503ba60cc67c56ffdafa7f/tenor.gif\",\r\n        },\r\n        {\r\n          id: 2,\r\n          label: \"Test2\",\r\n          gifLink:\r\n            \"https://media.tenor.com/images/db8149e4338a41fd24d1058053894f6a/tenor.gif\",\r\n        },\r\n        {\r\n          id: 3,\r\n          label: \"Test3\",\r\n          gifLink:\r\n            \"https://media.tenor.com/images/c66b5d522ff2d03c28a8586df2fbac64/tenor.gif\",\r\n        },\r\n        {\r\n          id: 4,\r\n          label: \"Test4\",\r\n          gifLink:\r\n            \"https://media.tenor.com/images/d450133c6a14f509424fe18dd491a90e/tenor.gif\",\r\n        },\r\n      ],\r\n      loadImage: {},\r\n      pageUrl: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n\r\n    const { history, match } = this.props;\r\n    let pageUrl = match.url;\r\n    let postId = match.params.label;\r\n    let foundImage = this.state.data.find((imgObj) => imgObj.label === postId);\r\n    console.log(foundImage);\r\n    this.setState({\r\n      loadImage: { ...foundImage },\r\n      pageUrl: pageUrl,\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <meta property=\"og:title\" content={this.state.loadImage.label} />\r\n          <meta property=\"og:type\" content=\"Gif Image\" />\r\n          <meta\r\n            property=\"og:description\"\r\n            content={this.state.loadImage.label}\r\n          />\r\n          <meta property=\"og:image\" content={this.state.loadImage.gifLink} />\r\n          <meta\r\n            property=\"og:url\"\r\n            content=\"https://niteshsinghnrs.github.io/niteshsingh/index.html\"\r\n          />\r\n        </Helmet>\r\n        {this.state.loadImage ? (\r\n          <div>{<img src={this.state.loadImage.gifLink} />}</div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IndividualGif;\r\n","import React, { Component } from \"react\";\r\nimport IndividualGif from \"../Component/IndividualGif\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [\r\n        {\r\n          id: 1,\r\n          label: \"Test1\",\r\n          gifLink:\r\n            \"https://media.tenor.com/images/0a00ff974d503ba60cc67c56ffdafa7f/tenor.gif\",\r\n        },\r\n        {\r\n          id: 2,\r\n          label: \"Test2\",\r\n          gifLink:\r\n            \"https://media.tenor.com/images/db8149e4338a41fd24d1058053894f6a/tenor.gif\",\r\n        },\r\n        {\r\n          id: 3,\r\n          label: \"Test3\",\r\n          gifLink:\r\n            \"https://media.tenor.com/images/c66b5d522ff2d03c28a8586df2fbac64/tenor.gif\",\r\n        },\r\n        {\r\n          id: 4,\r\n          label: \"Test4\",\r\n          gifLink:\r\n            \"https://media.tenor.com/images/d450133c6a14f509424fe18dd491a90e/tenor.gif\",\r\n        },\r\n      ],\r\n      loadImage: {},\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.data.map((item, i) => {\r\n          return (\r\n            <span key={i + 1}>\r\n              <NavLink to={`/image/${item.label}`}>\r\n                <img src={item.gifLink} />\r\n              </NavLink>\r\n            </span>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport HomePage from \"./Component/HomePage\";\nimport IndividualGif from \"./Component/IndividualGif\";\nimport { Switch, Link, Route, NavBar, NavLink } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavLink to={`/`}> Home</NavLink>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage}></Route>\n        <Route\n          path=\"/image/:label\"\n          render={(routerProps) => <IndividualGif {...routerProps} />}\n        ></Route>\n      </Switch>\n\n      {/* <HomePage /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}